
;;
; setup




to setup

  setup-world

  setup-agents

  setup-globals
  
end

;;
; setup globals
to setup-globals
  
  set humans-history []
  set zombies-history []

  set turn-probability 1 / 60.0
  
  set final-time 2160
  
  ;set setup-type "random"
  ;set setup-type "blocks"
  ;set setup-type "original"
  set setup-type "us-city"
  
end



to setup-agents
  clear-turtles
  ;; this stuff is in this function just so it always happens
  clear-all-plots

  reset-ticks
  
  random-seed simulation-seed

  ;; Zombies get the earliest who numbers; we use this elsewhere.
  ;; Make sure the beings are on non-built squares.
  create-zombies num-zombies [new-zombie]

  create-humans num-humans [new-human]

  create-military num-military [new-military]

  ask turtles [
    let dest one-of (patches with [pcolor = black])
    move-to dest
    
    ;setxy random-float world-width random-float world-height
    
    set paralysis-time 0
    set kills 0
    
    ; FIXME better locate directly on non built patches
    ;while [pcolor != black] [fd 1]
  ]
end



to setup-world
  clear-patches
  
<<<<<<< HEAD
  random-seed space-seed
=======
  if setup-type = "random" [
    ask n-of (count patches / 10) patches [set pcolor gray - 3]
  ]
  
  if setup-type = "blocks" [
    ; use the num-squares parameter
    ask n-of num-squares patches [set setup-block 1]
    repeat 20 [diffuse setup-block 0.5]
    ask patches with [setup-block > 0][set pcolor gray - 3]
  ]
  
  if setup-type = "us-city" [
   ;; more or less regular grid
    ask patches [set pcolor gray - 3]
    let px min-pxcor 
    while [px <= max-pxcor] [
      ask patches with [pxcor = px][set pcolor black]
     set px px + 5 + random 6 
    ]
    let py min-pycor 
    while [py <= max-pycor] [
      ask patches with [pycor = py][set pcolor black]
     set py py + 5 + random 6 
    ]
  ]
  
  if setup-type = "centers" [
    ; implementing density at an other spatial scale would imply an other process for random walk (linked to density gradient)
    
  ]
  
  if setup-type = "original" [
>>>>>>> profiling
  
  ask patches [
    ;; FIXME patch color should not be used as a state variable
    set pcolor gray - 3
    set fade-time 0
  ]

  
  ;; Make the alleyways.  Instead of the rectangle-placing approach, which proves slow,
  ;; let a special kind of turtle dig them.
  ;; The number of diggers here and later will need changing if the screen size is changed.
  clear-turtles
  
  ;; FIXME this should not be hardcoded
  create-diggers 154;; 112

  ;; Set the diggers up in pairs facing away from each other, so we don't get dead end passages
  ask diggers with [who mod 2 = 0] [
    setxy random-float world-width random-float world-height
    set heading 90 * random 4
  ]
  ask diggers with [who mod 2 = 1] [
    setxy [xcor] of turtle (who - 1) [ycor] of turtle (who - 1)
    set heading 180 + [heading] of turtle (who - 1)
    fd 1
  ]

  ask diggers [
    while [pcolor != black] [
      set pcolor black
      fd 1
        ; probability to have angles
      if random-float 1 < 0.05;(1 / 30) 
        [lt 90 + 180 * random 2]
    ]
  ]

  ;; Make the squares, by getting a few diggers to dig them out.
  clear-turtles
  create-diggers num-squares [
    setxy random-float world-width random-float world-height
    let xsize 2 + random 60
    let ysize 2 + random 60
    foreach n-values xsize [ ?1 -> ?1 ] [ ?1 ->
      let x ?1
      foreach n-values ysize [ ??1 -> ??1 ] [ ??1 -> ask patch-at x ??1 [set pcolor black] ]
    ]
  ]
  clear-turtles
  ]
    
end
